//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/scripts/InputSystem/InputMAP.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMAP: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMAP()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMAP"",
    ""maps"": [
        {
            ""name"": ""Tamagochi"",
            ""id"": ""2e252a9e-a783-4e9f-a70f-585b2be056bc"",
            ""actions"": [
                {
                    ""name"": ""movement"",
                    ""type"": ""Value"",
                    ""id"": ""327bac48-ab9e-450f-89f8-5953ab7b7b9d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""a31e8e47-bf91-4e49-867a-c124c3615cd5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""76481dfe-69b3-4739-a296-fdb61f97aaf5"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0d5a0e27-d3aa-4b53-815b-70e0e7540764"",
                    ""path"": ""w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6749363e-0eb0-4511-b0b6-f4793032e9ef"",
                    ""path"": ""s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""30be55dc-6d2f-45dd-b796-dd7456bd5880"",
                    ""path"": ""a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c814829b-66dd-4733-b227-9fccb0e501e0"",
                    ""path"": ""d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ad6e965d-c8f7-4a9c-8683-4674b10665a3"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Tamagochi
        m_Tamagochi = asset.FindActionMap("Tamagochi", throwIfNotFound: true);
        m_Tamagochi_movement = m_Tamagochi.FindAction("movement", throwIfNotFound: true);
        m_Tamagochi_Click = m_Tamagochi.FindAction("Click", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Tamagochi
    private readonly InputActionMap m_Tamagochi;
    private List<ITamagochiActions> m_TamagochiActionsCallbackInterfaces = new List<ITamagochiActions>();
    private readonly InputAction m_Tamagochi_movement;
    private readonly InputAction m_Tamagochi_Click;
    public struct TamagochiActions
    {
        private @InputMAP m_Wrapper;
        public TamagochiActions(@InputMAP wrapper) { m_Wrapper = wrapper; }
        public InputAction @movement => m_Wrapper.m_Tamagochi_movement;
        public InputAction @Click => m_Wrapper.m_Tamagochi_Click;
        public InputActionMap Get() { return m_Wrapper.m_Tamagochi; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TamagochiActions set) { return set.Get(); }
        public void AddCallbacks(ITamagochiActions instance)
        {
            if (instance == null || m_Wrapper.m_TamagochiActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TamagochiActionsCallbackInterfaces.Add(instance);
            @movement.started += instance.OnMovement;
            @movement.performed += instance.OnMovement;
            @movement.canceled += instance.OnMovement;
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
        }

        private void UnregisterCallbacks(ITamagochiActions instance)
        {
            @movement.started -= instance.OnMovement;
            @movement.performed -= instance.OnMovement;
            @movement.canceled -= instance.OnMovement;
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
        }

        public void RemoveCallbacks(ITamagochiActions instance)
        {
            if (m_Wrapper.m_TamagochiActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITamagochiActions instance)
        {
            foreach (var item in m_Wrapper.m_TamagochiActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TamagochiActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TamagochiActions @Tamagochi => new TamagochiActions(this);
    public interface ITamagochiActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnClick(InputAction.CallbackContext context);
    }
}
